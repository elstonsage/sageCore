############################################################################
############################################################################
##                                                                        ##
#	  ______   ______   .__   __.  _______  __    _______              #
#	 /      | /  __  \  |  \ |  | |   ____||  |  /  _____|             #
#	|  ,----'|  |  |  | |   \|  | |  |__   |  | |  |  __               #
#	|  |     |  |  |  | |  . `  | |   __|  |  | |  | |_ |              #
#	|  `----.|  `--'  | |  |\   | |  |     |  | |  |__| |              #
#	 \______| \______/  |__| \__| |__|     |__|  \______|              #
#                                                                          #
##                                                                        ##
############################################################################
############################################################################

##################################################################################
##################################################################################
##										##
#	Please note! This is a TEMPLATE configuration file. If you want to	 #
#	customize it, please make a copy of it and alter that copy. It is 	 #
#	important that the template stay in its original form.			 #
##										##
##################################################################################
##################################################################################

############################################################################
# Name:		title
# Description:	The title of the simulation
# Value range:  Any valid quote-enclosed string
# Default:	"genesis"
# Notes:	The title attribute will be used for, among other things,
#		the selection of filenames for output. For instance, if the
#		user specifies params.title = "foo", then the simulator will
#		generate files "foo.dat" and "foo.par".
############################################################################
#params.title = "genesis"

############################################################################
# Name:		SetMode("mode", [arguments])
# Description:	Choose a preset template for population simulation.
# Value range:  SetMode("ageon", [...]),
#		SetMode("assoc", [...]), 
#		SetMode("lodlink", [...]), 
#		SetMode("segreg", [...]),
#		SetMode("None", [...])
# Default:	SetMode("None", [...])
# Notes:	The simulator has several preset templates, tailored for 
#		specific S.A.G.E. programs. Please consult the simulator manual 
#		for more information on each template.
############################################################################
#SetMode("None", [])

############################################################################
# Name:		sampling
# Description:	Sampling method to use once the population has been generated.
# Value range:  "POPULATION"
# Default:	"POPULATION" (Entire population is used for output)
# Notes:	Please see simulator manual for complete information on
#		the various sampling methods.
############################################################################
#params.sampling = "POPULATION"

############################################################################
# Name:		mating_distance
# Description:	The minimum genetic distance between two potential mates
# Value range:  0 - 20
# Default:	7
# Notes:	The default value of 5 means that potential mates must be
#		at least as far apart genetically as second cousins.
#
#		Here are some other genetic distances:
#
#		1 - Full sibs can mate
#		3 - First cousins can mate
#		5 - Second cousins can mate
#		7 - Third cousins can mate
############################################################################
#params.mating_distance=7

############################################################################
# Name:		mating_type
#		mating_trait
# Description:	Mate selection algorithm
# Value range:  "RANDOM", "TRAIT"
# Default:	"RANDOM"
# Notes:	When the simulator selects a mate for some individual i, there
#		are a few algorithms it can use for the selection:
#
#		"RANDOM": Completely random selection among available mates.
#		"TRAIT": Selects the mate j such that abs(x(i) - x(j)) is the
#		minimum difference among available mates. "x" is a trait name,
#		given by params.mating_information.trait. For example:
#
#			params.type="TRAIT"
#			params.trait="MARITALADJ"
#
#		will cause the simulator to pick mates on the basis of the
#		difference between two individuals' values for trait
#		"MARITALADJ".
############################################################################
#params.type="RANDOM"

############################################################################
# Name:		allow_loops
# Description:	Specifies whether the sample can include families with loops.
# Value range:  0 (false), 1 (true)
# Default:	0 (false)
############################################################################
#params.allow_loops = 0

############################################################################
# Name:		allow_singletons
# Description:	Specifies whether the sample can include singletons (unrelated 
#		individuals).
# Value range:  0 (false), 1 (true)
# Default:	0 (false)
############################################################################
#params.allow_singletons = 0

############################################################################
# Name:		missing, founders_missing, nonfounders_missing
# Description:	Proportion of indicated individuals to be made uninformative
# Value range:  0.0 - 1.0 (inclusive)
# Default:	missing             = 0.05
#		founders_missing    = 0.0
#		nonfounders_missing = 0.0
# Notes:	Please note that if founders_missing will only be applied to
#		founders if founders_missing != 0.0. The equivalent rule
#		applies for nonfounders.
############################################################################
#params.missing             = 0.05
#params.founders_missing    = 0.00
#params.nonfounders_missing = 0.00

############################################################################
# Name: 	male_proportion, female_proportion
# Description:	Proportion of population that should be male/female.
# Value range:	0.0 - 1.0 (inclusive)
# Default:	male_proportion   = 0.5
#		female_proportion = 0.5
# Notes:	If you change one proportion, you must also change the
#		corresponding proportion such that the sum of the two
#		proportions is 1.0. Ie: If you set male_proportion to
#		0.3, you must also set female_proportion to 0.7.
############################################################################
#params.male_proportion   = 0.5
#params.female_proportion = 0.5

############################################################################
# Name:		min_sibship, max_sibship
# Description:	Minimum/maximum number of children produced by any mating.
# Value range:  0 - 100 (inclusive)
# Default:	min_sibship = 1
#		max_sibship = 3
# Notes:	Please note that setting max_sibship to 0 will effectively
#		cause no children to be produced by any mating. Also, please
#		make sure that max_sibship is >= to min_sibship.
############################################################################
#params.min_sibship = 1
#params.max_sibship = 3

############################################################################
# Name:		marry_ins
# Description:	Number of founders to create with each subsequent generations.
# Value range:  0 - 10000 (inclusive)
# Default:	10
############################################################################
#params.marry_ins = 10

############################################################################
# Name:		initial_num_of_inds
# Description:	Number of individuals to create in the first generation.
# Value range:  0 - 10000 (inclusive)
# Default:	100
# Notes:	Setting initial_num_of_inds to zero will effectively cause
#		no individuals to be produced.
############################################################################
params.initial_num_of_inds = 2500

############################################################################
# Name:		initial_num_of_males,
#		initial_num_of_females
# Description:	Number of sex-specific individuals to create in the initial
#		generation.
# Value range:  0 - 10000 (inclusive)
# Default:	0 (inactive)
# Notes:	Setting initial_num_of_males and initial_num_of_females
#		effectively OVERRIDES the initial_num_of_inds option. If, for
#		instance, you want to create 100 nuclear familes, you can set
#		initial_num_of_males and initial_num_of_females to 100, and
#		the simulator will produce exactly 100 nuclear families as
#		a result.
############################################################################
#params.initial_num_of_males   = 0
#params.initial_num_of_females = 0

############################################################################
# Name:		generations
# Description:	Number of generations to simulate in the population.
# Value range:  0 - 100 (inclusive)
# Default:	3
# Notes:	Setting generations to zero will effectively cause
#		no individuals to be produced.
############################################################################
#params.generations = 3

############################################################################
# Name:		informative_generations
# Description:	Number of generations to include in the output files.
# Value range:  0 - 100 (inclusive)
# Default:	0
# Notes:	Setting informative_generations to zero will effectively cause
#		this feature to be ignored; all available generations will be
#		used in the output. If informative_generations != 0, then
#		the simulator will progressively render prior generations
#		uninformative as it creates trait values.
#		Please see the simulator manual for complete information on
#		this option.
############################################################################
#params.informative_generations = 0

############################################################################
# Name:		nuclear_families
# Description:	Instructs genesis to create x number of nuclear families.
# Value range:  1 - 1000
# Default:	-1 (Inactive)
# Notes:	Setting nuclear_families will effectively set the following
#		options:
#
#			params.generations             = 2
#			params.informative_generations = 2
#			params.initial_num_of_males    = params.nuclear_families
#			params.initial_num_of_females  = params.nuclear_families
#			params.marry_ins               = 0
############################################################################
#nuclear_families = 5

#########################################################################################
#########################################################################################
##                                                                                     ##
#	.______      ___      .______          ___      .___  ___.      _______.	#
#	|   _  \    /   \     |   _  \        /   \     |   \/   |     /       |	#
#	|  |_)  |  /  ^  \    |  |_)  |      /  ^  \    |  \  /  |    |   (----`	#
#	|   ___/  /  /_\  \   |      /      /  /_\  \   |  |\/|  |     \   \    	#
#	|  |     /  _____  \  |  |\  \----./  _____  \  |  |  |  | .----)   |   	#
#	| _|    /__/     \__\ | _| `._____/__/     \__\ |__|  |__| |_______/  		#
#                                                                                       #
##                                                                                     ##
#########################################################################################
#########################################################################################

############################################################################
# Name:		AddParameter [user-defined parameter]
# Description:	Any user-defined parameter to be used in the simulation.
# Value range:  ???
# Default:	???
# Notes:	Please see the simulation manual for more information on this
#		feature. A brief explanation follows:
#
#		The user may specify any number of additional parameters to 
#		be used in the simulation algorithm. For simple (non-indexed)
#		parameters, the usage is as follows:
#
#			params.AddParameter(ParameterName, ParameterValue)
#
#		To add a parameter named "mean" with a value of 0.3, for 
#		example, the user must add the following line:
#
#			params.AddParameter("mean", 0.3)
#
#		Indexed parameters (such as genotype-specific means), however, 
#		are a little more complicated. To add an indexed parameter such 
#		as a genotype-specific mean, the user must first create the 
#		indexed parameter, then populate it with values. For instance:
#
#		0	# Remember to create the marker first!
#		1	params.AddMarker("MAR4", 0, ["A", 0.3, "B", 0.7])
#		2
#		3	# Now create the "mean" parameter as a Python dictionary:
#		4	params.AddParameter("mean", {})
#		5
#		6	# Now create the genotype-specific mean for each genotype:
#		7	params.GetParameter("mean")[MakeGenotype("MAR4", "A/A")] =  100.0
#		8	params.GetParameter("mean")[MakeGenotype("MAR4", "A/B")] =    0.0
#		9	params.GetParameter("mean")[MakeGenotype("MAR4", "B/B")] = -100.0
#
############################################################################
#params.AddParameter("dummy_parameter", 3.0)

#########################################################################################
#########################################################################################
##                                                                                     ##
#	.___  ___.      ___      .______       __  ___  _______ .______      		#
#	|   \/   |     /   \     |   _  \     |  |/  / |   ____||   _  \     		#
#	|  \  /  |    /  ^  \    |  |_)  |    |  '  /  |  |__   |  |_)  |    		#
#	|  |\/|  |   /  /_\  \   |      /     |    <   |   __|  |      /     		#
#	|  |  |  |  /  _____  \  |  |\  \----.|  .  \  |  |____ |  |\  \----.		#
#	|__|  |__| /__/     \__\ | _| `._____||__|\__\ |_______|| _| `._____|		#
#                                                                                       #
##                                                                                     ##
#########################################################################################
#########################################################################################

############################################################################
# Name:		AddMarker [user-defined marker]
# 		AddPhenoset [user-defined phenoset]
# Description:	Any user-defined marker/phenoset to be used in the simulation.
# Value range:  ???
# Default:	???
# Notes:	Please see the simulation manual for more information on this
#		feature. A brief explanation follows:
#
#		The AddMarker function is available as a quick way to add a 
#		marker to your simulation. Its usage is as follows:
#
#			params.AddMarker(name, is_x_linked, [allele1_name, allele1_frequency, ..., 
#			                                     alleleX_name, alleleX_frequency])
#
#		The is_x_linked parameter indicates if this marker is x-linked.
#		A value of 1 indicates that it is x-linked; 0 indicates that
#		it is not.
#
#		The user can specify as many alleles as he wants, but each 
#		allele must have a corresponding frequency listed. If the 
#		user desires equal allele frequencies, he can enter an allele 
#		frequency of -1. This -1 will be interpreted as meaning 
#		"equal allele frequency."
#
#		For example, if a user wants a simple two-allele marker named 
#		"MAR4", he can add the following line to his configuration file:
#
#			params.AddMarker("MAR4", 0, ["A", 0.3, "B", 0.7])
#
#		In addition, if the user wants to specify a genotype-to-phenotype 
#		mapping, he can use the params.AddPhenoset() function to do this. 
#		For example, if genotypes "A/A" and "A/B" both produce phenotype 
#		"1", this can be simulated by the following line:
#
#			params.AddPhenoset("MAR4", "1", ["A/A", "A/B"])
#
#		Please note that the corresponding phenotypic trait name will be
#		the marker name with "pheno" appended to it (a marker named
#		"MAR" becomes "MARpheno").
#
#		Also, please note that you must FIRST add a marker BEFORE you
#		add that marker's phenosets!
#
#		In addition, if the users wants to specify a recombination distance
#		between any two markers, he can use the params.SetMarkerDistance(...)
#		function. Remember to add your markers BEFORE you set the recombination
#		distance:
#
#			params.SetMarkerDistance(Marker1name, Marker2name, map_function, distance)
#
############################################################################
#params.AddMarker("MAR4", 0, ["A", 0.3, "B", 0.7])
#params.AddMarker("MAR5", 0, ["A", 0.3, "B", 0.7])
#params.SetMarkerDistance("MAR4", "MAR5", "HALDANE", 200)
#params.AddPhenoset("MAR4", "1", ["A/A", "A/B"])
#params.AddPhenoset("MAR4", "2", ["B/B"])

params.AddMarker("MAR0",            0, ["A", 0.5, "B", 0.5])
params.AddMarker("MAR1",            0, ["A", 0.5, "B", 0.5])
params.AddMarker("MAR2",            0, ["A", 0.5, "B", 0.5])
params.AddMarker("MAR3",            0, ["A", 0.5, "B", 0.5])
params.AddMarker("MAR4",            0, ["A", 0.5, "B", 0.5])
params.AddMarker("MAR5",            0, ["A", 0.5, "B", 0.5])
params.AddMarker("SPECIAL_MAR54",   0, ["A", 0.9, "B", 0.1])
params.AddMarker("MAR6",            0, ["A", 0.5, "B", 0.5])
params.AddMarker("MAR7",            0, ["A", 0.5, "B", 0.5])
params.AddMarker("MAR8",            0, ["A", 0.5, "B", 0.5])
params.AddMarker("MAR9",            0, ["A", 0.5, "B", 0.5])
params.AddMarker("MAR10",           0, ["A", 0.5, "B", 0.5])
params.AddMarker("SPECIAL_MAR101",  0, ["A", 0.9, "B", 0.1])
params.AddMarker("MAR11",           0, ["A", 0.5, "B", 0.5])
params.AddMarker("MAR12",           0, ["A", 0.5, "B", 0.5])
params.AddMarker("MAR13",           0, ["A", 0.5, "B", 0.5])
params.AddMarker("MAR14",           0, ["A", 0.5, "B", 0.5])
params.AddMarker("MAR15",           0, ["A", 0.5, "B", 0.5])
params.AddMarker("MAR16",           0, ["A", 0.5, "B", 0.5])
params.AddMarker("MAR17",           0, ["A", 0.5, "B", 0.5])
params.AddMarker("MAR18",           0, ["A", 0.5, "B", 0.5])
params.AddMarker("MAR19",           0, ["A", 0.5, "B", 0.5])
params.AddMarker("SPECIAL_MAR197",  0, ["A", 0.9, "B", 0.1])
params.AddMarker("MAR20",           0, ["A", 0.5, "B", 0.5])
params.AddMarker("UNLINKED",        0, ["A", 0.5, "B", 0.5])

params.SetMarkerDistance("MAR0",  "MAR1", "HALDANE", .01)
params.SetMarkerDistance("MAR1",  "MAR2", "HALDANE", .01)
params.SetMarkerDistance("MAR2",  "MAR3", "HALDANE", .01)
params.SetMarkerDistance("MAR3",  "MAR4", "HALDANE", .01)
params.SetMarkerDistance("MAR4",  "MAR5", "HALDANE", .01)

params.SetMarkerDistance("MAR5",          "SPECIAL_MAR54", "HALDANE", 0.004)
params.SetMarkerDistance("SPECIAL_MAR54", "MAR6",          "HALDANE", 0.006)

params.SetMarkerDistance("MAR6",  "MAR7",  "HALDANE", .01)
params.SetMarkerDistance("MAR7",  "MAR8",  "HALDANE", .01)
params.SetMarkerDistance("MAR8",  "MAR9",  "HALDANE", .01)
params.SetMarkerDistance("MAR9",  "MAR10", "HALDANE", .01)

params.SetMarkerDistance("MAR10",          "SPECIAL_MAR101", "HALDANE", 0.001)
params.SetMarkerDistance("SPECIAL_MAR101", "MAR11",          "HALDANE", 0.009)

params.SetMarkerDistance("MAR11", "MAR12", "HALDANE", .01)
params.SetMarkerDistance("MAR12", "MAR13", "HALDANE", .01)
params.SetMarkerDistance("MAR13", "MAR14", "HALDANE", .01)
params.SetMarkerDistance("MAR14", "MAR15", "HALDANE", .01)
params.SetMarkerDistance("MAR15", "MAR16", "HALDANE", .01)
params.SetMarkerDistance("MAR16", "MAR17", "HALDANE", .01)
params.SetMarkerDistance("MAR17", "MAR18", "HALDANE", .01)
params.SetMarkerDistance("MAR18", "MAR19", "HALDANE", .01)

params.SetMarkerDistance("MAR19",          "SPECIAL_MAR197", "HALDANE", 0.007)
params.SetMarkerDistance("SPECIAL_MAR197", "MAR20",          "HALDANE", 0.003)

#########################################################################################
#########################################################################################
##                                                                                     ##
#	.___________..______          ___       __  .___________.    _______.		#
#	|           ||   _  \        /   \     |  | |           |   /       |		#
#	`---|  |----`|  |_)  |      /  ^  \    |  | `---|  |----`  |   (----`		#
#	    |  |     |      /      /  /_\  \   |  |     |  |        \   \    		#
#	    |  |     |  |\  \----./  _____  \  |  |     |  |    .----)   |   		#
#	    |__|     | _| `._____/__/     \__\ |__|     |__|    |_______/    		#
##                                                                                     ##
#########################################################################################
#########################################################################################

############################################################################
# Name:		[user-defined trait]
# Description:	Any user-defined trait to be used in the simulation.
# Value range:  N/A
# Default:	N/A
# Notes:	Please see the simulation manual for more information on this
#		feature. A brief explanation follows:
#
#				===================
#				===== SUMMARY =====
#				===================
#
#		The user can add any kind of functionally defined trait he wants.
#		The function itself is written in Python, and as such must follow
#		standard Python syntax.
#
#				=====================
#				===== TEMPLATES =====
#				=====================
#
#		There are several pre-defined trait templates available to the user. 
#		Please consult the simulation manual for detailed information on each
#		trait template. The available templates include:
#
#			o Polygenotype
#			o NormalContinuousTrait
#			o CompositeTrait
#
#		To add a trait template, the user must include the following line in
#		his configuration file:
#
#			params.AddTrait(TRAITTYPE(ARGUMENTS...))
#
#		For instance, to add a NormalContinuousTrait named "Z" with mean=5.5
#		and variance=1.2, the user must add the following configuration line:
#
#			params.AddTrait(NormalContinuousTrait("Z", 5.5, 1.2))
#		
#				===============================
#				===== USER-DEFINED TRAITS =====
#				===============================
#
#		To create a specialized trait, the user must first create that trait's
#		class, then use the params.AddTrait(...) function to add an
#		instance of that class. Here is a class that returns a normally
#		distributed value with mean and variance taken as population
#		parameters:
#
#		0	class my_Trait(Trait):
#		1	        def __init__(self):
#	        2		        Trait.__init__(self)
#	 	3
#		4	                self.name         = "my_Trait"
#		5	                self.type         = "FUNCTIONAL"
#		6	                self.missing_code = "MISS"
#		7
#		8	        def Function(self, pfamily, id, population_params):
#		9	                ind      = pfamily.individuals[id]
#		10			mean     = population_params.GetParameter("mean")
#		11			variance = population_params.GetParameter("variance")
#		12			return normal(mean, variance)
#		13
#		14	params.AddTrait(my_Trait())
#
#				==========================
#				===== TRANSFORMATION =====
#				==========================
#
#		Any trait can also be subjected to a transformation. Once you
#		have added the trait, you can use the params.SetTransformation(...)
#		function to specify a transformation for that trait:
#
#			params.SetTransformation(trait_name, transformation_type, power_parameter, shift_parameter)
#
#		Where trait_name is any valid trait name, transformation_type is either
#		"BOX-COX" or "GEORGE-ELSTON", and power_parameter and shift_parameter are
#		both valid numeric values.
#
#		For instance, to add a NormalContinuousTrait, and then transform it,
#		you may add the following two lines to your configuration file:
#
#		1	params.AddTrait(NormalContinuousTrait("z", 200.0, 3.5))
#		2	params.SetTransformation("z", "BOX-COX", 1, -50.0)
#
############################################################################
# You can un-comment the following code to use as a template for any
# trait you wish to create.
#
#class my_Trait(Trait):
#	def __init__(self):
#		Trait.__init__(self)
#		self.name         = "my_Trait"
#		self.type         = "FUNCTIONAL"
#		self.missing_code = "MISS"
#
#	def Function(self, pfamily, id, population_params):
#		ind = pfamily.individuals[id]
#		val = 0.0
#		# Insert formulas here...
#		return val
#
#params.AddTrait(my_Trait()) # Don't forget to add the trait!
#params.AddTrait(NormalContinuousTrait("z", 200.0, 3.5))
#params.SetTransformation("z", "BOX-COX", 1, -50.0)

#params.AddSpecialPhenotype(alpha, phenoset_effect, [weights/covariates], gamma, 
class my_trait(Trait):
	def __init__(self, name):
		Trait.__init__(self)
		self.name         = name + "_T"
                self.mname        = name
		self.type         = "FUNCTIONAL"
		self.missing_code = "MISS"

	def Function(self, pfamily, id, population_params):
		ind = pfamily.individuals[id]
                genotype = ind.GetTrait(self.mname).Print()
                if(genotype == "A/A"):
                  return 1.0 * (random.random() < 0.01)
                if(genotype == "A/B"):
                  return 1.0 * (random.random() < 0.1)
                return 1.0

params.AddTrait(my_trait("SPECIAL_MAR54"))
params.AddTrait(my_trait("SPECIAL_MAR101"))
params.AddTrait(my_trait("SPECIAL_MAR197"))
params.AddTrait(my_trait("UNLINKED"))
